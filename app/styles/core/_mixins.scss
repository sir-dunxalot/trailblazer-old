/*
Remove the units from a number (CSS Tricks)

http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
*/

@function strip_unit($num) {
  @return $num / ($num * 0 + 1);
}

/*
Set sizes in REM with PX as a fallback for older browsers (CSS Tricks)

http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
*/

@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip_unit(nth($values, $i)) * 10;
    $pxValues: #{$pxValues + $value}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip_unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

/*
Target class modifiers. Can use & inside the mixin to target modifier nested in another class
*/

@mixin mod($class_begins_with) {
  [class*="#{$class_begins_with}-"] {
    @content;
  }
}

/*
Target input placeholders
*/

@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

/*
Color text based on background color
*/

@mixin color($color) {
  background-color: $color;

  @if (bright($color) == true) {
    color: $darkTextColor;
  } @else {
    color: $lightTextColor;
  }
}

/*
http://en.wikipedia.org/wiki/YIQ

YIQ takes into account the differences of perception between R, G, and B (red, green, and blue are not perceived equally by the human eye).

The below mixin normalizes each component of RGB and looks at the brightness/contrast to set the text color.

Color brightness and contrast is explained here - http://www.w3.org/WAI/ER/WD-AERT/#color-contrast
*/

@function bright($color) {
  $yiq: ( (red($color) * 299) + (green($color) * 587) + (blue($color) * 114) ) / 1000;

  /*
  128 is half of 256 (max brightness as perceived by the human eye)
  Thus, if backgorund is more than half lightness (closer to 256 than 0), make the text dark
  */

  @if ($yiq >= 128) {
    @return true;
  } @else {
    @return false;
  }
}

/* Animations */

@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  animation: $animation;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @-o-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

/*
https://github.com/Igosuki/compass-mixins/issues/43

Hack until compass-mixins is synced up with new libsass
*/

@function -owg($property) {
  @return -moz-#{$property};
}

@function -webkit($property) {
  @return -webkit-#{$property};
}

@function -moz($property) {
  @return -moz-#{$property};
}

@function -ms($property) {
  @return -ms-#{$property};
}

@function -o($property) {
  @return -o-#{$property};
}

/* Media Queries */

@mixin small {
  @media (min-width: $small) {
    @content;
  }
}

@mixin medium {
  @media (min-width: $medium) {
    @content;
  }
}

@mixin large {
  @media (min-width: $large) {
    @content;
  }
}

@mixin extra-large {
  @media (min-width: $extraLarge) {
    @content;
  }
}

/* Background gradient */

@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  $length: length($list);
  @return nth($list, $length);
}

@mixin background-gradient($color, $from, $stops...) {
  background-color: $color; // Fallback color
  // CSS3 Gradients
  background-image: -ms-linear-gradient($from, $stops); // IE11
  @include background-image(linear-gradient($from, $stops)); // Modern browsers
  // IE 5.5-8 Fallback
  $firstStopColor: nth(first($stops), 1);
  $lastStopColor: nth(last($stops), 1);
  $fallbackDir: null;

  @if (length($from) > 1) {
    $fallbackDir: horizontal;
  } @else if ($from == 'left') {
    $fallbackDir: horizontal;
  } @else if ($from == 'right') {
    $fallbackDir: horizontal;
  } @else {
    $fallbackDir: vertical;
    // Reverse stops for vertical gradient as we specify from bottom
    $firstStopColor: nth(last($stops), 1);
    $lastStopColor: nth(first($stops), 1);
  }

  .no-cssgradients & {
    @include filter-gradient($firstStopColor, $lastStopColor, $fallbackDir);
  }
}
